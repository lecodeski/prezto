#!/bin/zsh

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

### Environment Variables
#########################
export BAT_CONFIG_PATH=~/.batrc

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### Auto Completions
####################
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /opt/homebrew/bin/terraform terraform
compdef _gnu_generic delta
[ $commands[kind] ] && source <(kind completion zsh)

# zsh auto suggestions
# Widgets that accept the entire suggestion
export ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(
        end-of-line
        vi-forward-char
        vi-end-of-line
        vi-add-eol
)

# Widgets that accept the suggestion as far as the cursor moves
export ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=(
        forward-word
        forward-char
        vi-forward-word
        vi-forward-word-end
        vi-forward-blank-word
        vi-forward-blank-word-end
)

### Additional external scripts
###############################
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ $TERMINAL_INTELLIJ == 'TRUE' && -f ~/.p10k-intellij.zsh ]] && source ~/.p10k-intellij.zsh
[[ $TERMINAL_INTELLIJ != 'TRUE' && -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

### Key bindings
################
[[ $TERMINAL_INTELLIJ != 'TRUE' ]] && bindkey "^H" backward-kill-word
[[ $TERMINAL_INTELLIJ != 'TRUE' ]] && bindkey "^[^H" kill-whole-line
bindkey "^[[5~" history-beginning-search-backward # Page Up
bindkey "^[[6~" history-beginning-search-forward  # Page Down
bindkey '^f' vi-forward-word
bindkey '^b' vi-backward-word
bindkey '^x' fzf-cd-widget

stty susp "^u"
bindkey '^u' fancy-ctrl-z

bindkey '^v' yank
bindkey '^y' redo
bindkey '^z' undo

### Aliases
###########
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias .......='cd ../../../../../..'
alias ........='cd ../../../../../../..'
alias .........='cd ../../../../../../../..'
alias ..........='cd ../../../../../../../../..'

alias .2='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'
alias .6='cd ../../../../../..'
alias .7='cd ../../../../../../..'
alias .8='cd ../../../../../../../..'
alias .9='cd ../../../../../../../../..'

alias _='sudo -E env PATH=$PATH '
alias __='sudo -s -E'
[ $commands[k9s] ] && alias 0='k9s -c po' && alias ß='k9s -c deploy --context prod-plutos'

alias arc=archive
[ $commands[aws-vault] ] && alias av=aws-vault
[ $commands[assume] ] && alias assume=". assume" && alias asm=". assume"

if [[ $commands[brew] ]]; then
  alias b=brew
  alias bd='brew doctor'
  alias bh='brew home'
  alias bi='brew info'
  alias bin='brew install'
  alias bl='brew list'
  alias br='brew remove'
  alias bs='brew search'
  alias bsv='brew services'
  alias bu='brew uses'
fi

alias c=cd
[ $commands[pbcopy] ] && alias cpy=pbcopy && alias cwd='pwd | cpy'
alias ci='autoload -U compinit && compinit'
alias cr='cp -r'

[ $commands[docker] ] && alias dk=docker && alias di='docker images'
[ $commands[docker-compose] ] && alias dc=docker-compose
alias df='df -H'
[ $commands[docker-machine] ] && alias dm=docker-machine
[ $commands[doggo] ] && alias dog=doggo
alias du='setopt CSH_NULL_GLOB && du -sch .[!.]* * |sort -h && unsetopt CSH_NULL_GLOB'

[ $commands[fd] ] && alias f='fd -HI'
alias fzf='fzf --preview "head -100 {}"'

alias g=git
alias ga='git add'
alias gaa='git add -A'
alias gb='git recent'
alias gc='git commit'
alias gca='git commit -a'
alias gcma='git commit -a --message'
alias gcn='git commit --no-edit'
alias gcfa='gcf -a'
alias gco='git checkout'
alias gd='git diff'
alias gdg='git difftool -g'
alias gds='git diff --staged'
alias gf='git fetch --all'
alias gl='git l'
alias gm='git merge'
alias gmg='git mergetool -g'
alias gp='git pull --rebase'
alias gpm='git pull --no-rebase'
alias gpu='git push'
alias gr='git restore'
alias gra='git restore :/'
alias grs='git restore --staged'
alias grsa='git restore --staged :/'
alias gw='git open'
[ $commands[grc] ] && unalias grc
alias grb='git rebase'
alias grm='git remote -v'
alias gs='git status'
alias gsh='git show'
alias gsm='git submodule'
alias gsp='git stash pop'
alias gst='git stash save --include-untracked --keep-index'
alias gstf='git stash --'
alias gsw='git switch'

[ $commands[idea] ] && alias iiff='idea diff' && alias i=idea

alias jj='fasd_cd -i'

[ $commands[kubectl] ] && alias k=kubectl && [ $commands[kubectx] ] && alias kc='kubectx' && alias -- -='kubectx -' || alias kc='kubectl config use-context'
[ -f ~/Projekte/Perl/SandBox/krazy-kase.pl ] && alias kk='perl ~/Projekte/Perl/SandBox/krazy-kase.pl'
[ -x ~/Projekte/Perl/SandBox/krazy-kase-clipboard.sh ] && alias kkc=~/Projekte/Perl/SandBox/krazy-kase-clipboard.sh

alias l=locate
alias lz='git -C ${ZDOTDIR:-$HOME}/.zprezto l'
alias lzp='git -C ${ZDOTDIR:-$HOME}/.zprezto/modules/prompt/external/powerlevel10k l'

[ $commands[minikube] ] && alias mk=minikube
[ $commands[mtr] ] && alias mtr='_ mtr'

alias ncdu='_ ncdu -e --color dark'
[ $commands[npm] ] && alias n='BROWSER=/Applications/Chromium.app/Contents/MacOS/Chromium npm'

[ $commands[bat] ] && alias p=bat
[ $commands[prettyping] ] && alias ping=prettyping
[ $commands[pstorm] ] && alias piff='pstorm diff'
[ $commands[pbpaste] ] && alias pst=pbpaste && alias pd='cd $(pst)'
alias python=python3

alias rg='batgrep -i --hidden --no-ignore'
alias rr='rm -rf'

[ $commands[subl] ] && alias sl=subl

[ $commands[terraform] ] && alias tf='terraform'
[ $commands[btop] ] && alias top='btop'
[ $commands[traceroute] ] && alias tracert=traceroute

alias ua='unarchive'
alias um='diskutil unmount'

alias üs=trans

alias v=vim

alias www=links

[ $commands[yarn] ] && alias y='BROWSER=/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome yarn'

### Functions
#############
if [[ $commands[moco] ]]; then
  unalias e

  alias a='moco timer start'
  alias e='moco timer stop'
  alias ü='moco overtime'
  alias üm='ü --monthly'

  datestamp () {
    [ $3 ] && echo "$3-$2-$1" && return
    [ $2 ] && echo "$(date +%Y-)$2-$1" && return
    [ $1 ] && echo "$(date +%Y-%m-)$1" && return
    echo "$(date +%Y-%m-%d)"
  }

  backward () {
    echo "--backward ${1:-0}"
  }

  z () {
    moco list --date $(datestamp "$1" "$2" "$3")
  }

  zt () {
    moco list $(backward "$1")
  }

  zw () {
    moco list --week $(backward "$1")
  }

  zm () {
    moco list --month $(backward "$1")
  }

  ze () {
    moco edit-date --date $(datestamp "$1" "$2" "$3")
  }

  zl () {
    moco rm --date $(datestamp "$1" "$2" "$3")
  }

  zb () {
    moco new --hours ${1/,/.} --date $(datestamp "$2" "$3" "$4") $5 $6 $7 $8
    z "$2" "$3" "$4"
  }

  book_task () {
    zb ${1:-0} "$2" "$3" "$4" "--project" "$5" "--task" "$6"
  }

  zbb () {
    book_task "$1" "$2" "$3" "$4" "945873179" "12371390"
  }

  zbbc () {
    book_task "$1" "$2" "$3" "$4" "947103029" "24819463"
  }

  zbbn () {
    book_task "$1" "$2" "$3" "$4" "945873179" "12371333"
  }

  zbi () {
    book_task "$1" "$2" "$3" "$4" "945824843" "12188024"
  }

  zbm () {
    book_task "$1" "$2" "$3" "$4" "945824843" "12188022"
  }

  zbmr () {
    book_task "$1" "$2" "$3" "$4" "945824843" "12157915"
  }

  zbmt () {
    book_task "$1" "$2" "$3" "$4" "945850311" "12120194"
  }

  zbo () {
    book_task "$1" "$2" "$3" "$4" "946804155" "21768383"
  }

  zbr () {
    book_task "$1" "$2" "$3" "$4" "945850311" "12120234"
  }

  zbz () {
    book_task "$1" "$2" "$3" "$4" "946919274" "22863646"
  }
fi

[[ -d /Applications/Dash.app ]] && ds () {
  open "dash://b%3A$*"
}

fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    bg
    zle redisplay
  else
    zle push-input
  fi
}
zle -N fancy-ctrl-z

[ $commands[fd] ] && ff () {
  _ fd "$*" /
}

konfigmerge () {
  export KUBECONFIG=~/.kube/config:$(realpath $1)
  cp ~/.kube/config ~/.kube/config.bak
  kubectl config view --flatten >| ~/.kube/merged
  cp ~/.kube/merged ~/.kube/config
  unset KUBECONFIG
  delta ~/.kube/config.bak ~/.kube/config
}

u () {
  brew upgrade
  rm -f "$(brew --prefix)/share/zsh/site-functions/_git"
  echo $FX[bold]'Brew upgrades finished 🍻'
  b cu --include-mas --no-brew-update -q -y
  echo $FX[bold]'Brew cask upgrades finished 🍻'
  [ $commands[tldr] ] && echo '🍻 Updating tldr' && tldr --update
  echo '🍻 Updating Prezto:'$FX[off] && zprezto-update
}

# by Leah Neukirchen (http://leahneukirchen.org/dotfiles/.zshrc)
# wat - a better and recursive which/whence
# 13apr2017  +leah+
# 02jan2018  +leah+  print function code
# 09mar2024  +lecodeski+  improve whatis and file output
# 04apr2024  +lecodeski+  add whatis in function case
# 28jul2025  +lecodeski+  add tldr in command case
# 31jul2025  +lecodeski+  add another recursion after unalias
wat() {
  ( # constrain unalias
  for cmd; do
    if (( $+aliases[$cmd] )); then
      printf '%s: aliased to %s\n' "$cmd" "${aliases[$cmd]}"
      local -a words=(${${(z)aliases[$cmd]}:#(*=*|rlwrap|noglob|command)})
      unalias "$cmd"
      if [[ ${words[1]} == "\""* ]]; then
        words[1]=${words[1]#"\""}
        unalias "${words[1]}" 2>/dev/null
      fi
      wat "${words[1]}"

      [ $words[1] != $cmd ] && \
        captioned-delimiter "looking up unaliased command [$cmd]" && \
        wat "$cmd"
    elif (( $+functions[$cmd] )); then
      whence -v "$cmd"
      whence -f "$cmd"
      whatis "$cmd" | grep "^$cmd(" --color=never | sort | uniq
      echo ""
    elif (( $+commands[$cmd] )); then
      wat "${commands[$cmd]}"
      whatis "$cmd" | grep "^$cmd(" --color=never | sort | uniq
      [ $commands[tldr] ] && tldr $cmd --short-options
    elif [[ -h $cmd ]]; then
      file "$cmd" -h
      wat "$cmd:A"
    elif [[ -x $cmd ]]; then
      file "$cmd"
    else
      which "$cmd"
      echo ""
    fi
  done
  )

  captioned-delimiter() {
    termwidth="$(tput cols)"
    padding="$(printf '%0.1s' ={1..500})"
    printf '%*.*s %s %*.*s\n' 0 "$(((termwidth-2-${#1})/2))" "$padding" "$1" 0 "$(((termwidth-1-${#1})/2))" "$padding"
  }
}
compdef wat=which

[ $commands[eza] ] && x () {
  [ $1 ] && target=$1 || target=.
  if ! [[ -a $target ]]; then target=$target* && dir_only=d; else dir_only='' fi
  [ $2 ] && sort=$2 || sort=.name
  eza -lah$dir_only -s $sort --git --icons $~target && print "$FX[bold]count: $(eza -la$dir_only $~target | wc -l )$FX[off]"
} && alias x.='x ..' && xs () {
  x "$1" "size"
} && alias xs.='xs ..' && xt () {
  x "$1" "time"
} && alias xt.='xt ..' && xx () {
  [ $1 ] && eza -lahd -s .name --git --icons *$1* && print "$FX[bold]count: $(eza -lad *$1* | wc -l )$FX[off]"
}

[ $commands[broot] ] && xb() {
    f=$(mktemp)
    (
	set +e
	broot -g --outcmd "$f" "$@"
	code=$?
	if [ "$code" != 0 ]; then
	    rm -f "$f"
	    exit "$code"
	fi
    )
    code=$?
    if [ "$code" != 0 ]; then
	return "$code"
    fi
    d=$(<"$f")
    rm -f "$f"
    eval "$d"
}

### Options
###########
unsetopt nomatch
setopt globdots
