#!/bin/zsh

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### Auto Completions
####################
# tabtab source for packages
# uninstall by removing these lines
[[ -f ~/.config/tabtab/__tabtab.zsh ]] && source ~/.config/tabtab/__tabtab.zsh

[ $commands[jira] ] && eval "$(jira --completion-script-zsh)"

[ $commands[aws-vault] ] && eval "$(aws-vault --completion-script-zsh)"

### Additional external scripts
###############################
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ $TERMINAL_INTELLIJ == 'TRUE' && -f ~/.p10k-intellij.zsh ]] && source ~/.p10k-intellij.zsh
[[ $TERMINAL_INTELLIJ != 'TRUE' && -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# zsh auto suggestions
# Widgets that accept the entire suggestion
export ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(
        end-of-line
        vi-forward-char
        vi-end-of-line
        vi-add-eol
)

# Widgets that accept the suggestion as far as the cursor moves
export ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=(
        forward-word
        forward-char
        vi-forward-word
        vi-forward-word-end
        vi-forward-blank-word
        vi-forward-blank-word-end
)

### Key bindings
################
[[ $TERMINAL_INTELLIJ != 'TRUE' ]] && bindkey "^?" backward-kill-word
[[ $TERMINAL_INTELLIJ != 'TRUE' ]] && bindkey "^[^H" kill-whole-line
bindkey "^[[5~" history-beginning-search-backward # Page Up
bindkey "^[[6~" history-beginning-search-forward  # Page Down
bindkey '^f' vi-forward-word
bindkey '^b' vi-backward-word
bindkey '^x' fzf-cd-widget

stty susp "^u"
bindkey '^u' fancy-ctrl-z

bindkey '^z' undo

### Variables
#############
export git_log_format='--format=%<(19,trunc)%C(yellow)%an %<(33)%Cblue%aD%<(16)%C(green)%ar%Cred%d %Creset%s %C(cyan)%h'

### Aliases
###########
alias ...='cd ../..'
alias _='sudo -E env PATH=$PATH '
alias __='sudo -s -E /bin/zsh'
[ $commands[k9s] ] && alias 9='k9s --headless'

[ $commands[aws-vault] ] && alias av=aws-vault

if [[ $commands[brew] ]]; then
  alias b=brew
  alias bh='HOMEBREW_BROWSER=$commands[links] brew home'
  alias bi='brew info'
  alias bin='brew install'
  alias bl='brew list'
  alias br='brew remove'
  alias bs='brew search'
  alias bsv='brew services'
  alias bu='brew uses'
fi

alias c=cd
[ $commands[pbcopy] ] && alias cpy=pbcopy && alias cwd='pwd | cpy'

[ $commands[docker] ] && alias d=docker
[ $commands[docker-compose] ] && alias dc=docker-compose
alias df='df -H'
[ $commands[docker-machine] ] && alias dm=docker-machine
alias du='setopt CSH_NULL_GLOB && du -sch .[!.]* * |sort -h && unsetopt CSH_NULL_GLOB'

[ $commands[fd] ] && alias f='fd -HI'
alias fzf='fzf --preview "head -100 {}"'

alias g=git
alias ga='git add'
alias gb='git branch'
alias gc='git commit'
alias gco='git checkout'
alias gd='git diff'
alias gdg='git difftool -g'
alias gf='git fetch'
alias gg='DISABLE_URL_EXPANSION=true BROWSER=links googler --colors Cjdgxy'
alias ghw='BROWSER=$commands[links] git open'
alias gl='git log ${git_log_format} --all'
alias gm='git merge'
alias gp='git pull --rebase'
alias gpm='git pull --no-rebase'
alias gpu='git push'
alias gr='git restore'
[ $commands[grc] ] && unalias grc
alias grm='git remote'
alias gs='git status'
alias gsm='git submodule'
alias gsh='git show'
alias gsp='git stash pop'
alias gst='git stash save --include-untracked --keep-index'
alias gsw='git switch'

[ $commands[idea] ] && alias iiff='idea diff' && alias i=idea

alias jj='fasd_cd -i'

[ $commands[kubectl] ] && alias k=kubectl && alias kc='kubectl config use-context'

alias l=locate

[ $commands[minikube] ] && alias mk=minikube
[ $commands[mtr] ] && alias mtr='_ mtr'

alias ncdu='_ ncdu -e --color dark'
[ $commands[npm] ] && alias n='BROWSER=/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome npm'

[ $commands[bat] ] && alias p='bat --style numbers,changes,snip,header'
[ $commands[prettyping] ] && alias ping=prettyping
[ $commands[pstorm] ] && alias piff='pstorm diff'
[ $commands[pbpaste] ] && alias pst=pbpaste && alias pd='cd $(pst)'

alias rg='rg -i --hidden'
alias rr='rm -rf'

[ $commands[subl] ] && alias sl=subl
[ $commands[gsort] ] && alias sort=gsort

[ $commands[btop] ] && alias top='btop'
[ $commands[traceroute] ] && alias tracert=traceroute

alias üs=trans

alias v=vim

alias www=links

[ $commands[yarn] ] && alias y='BROWSER=/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome yarn'

alias zl='git --git-dir ~/.zprezto/.git log ${git_log_format} --all'
alias zpl='git --git-dir ~/.zprezto/modules/prompt/external/powerlevel10k/.git log ${git_log_format} --all'

### Functions
#############
if [[ -x /Users/eugen/Projekte/PHP/OpenSource/CTB/artisan ]]; then
  unalias e

  alias ts='ctb time:task:switch rounded'
  alias ü='ctb time:overview'
  alias vp='ctb missed:pause:book rounded'
  alias vz='ctb missed:time:book rounded'

  ctb () {
    /usr/local/opt/php@7.4/bin/php /Users/eugen/Projekte/PHP/OpenSource/CTB/artisan $*
  }

  a () {
    ctb start:time:book rounded $1 $(datestamp "$2" "$3" "$4")
  }

  function e () {
    ctb end:time:book rounded $1 $(datestamp "$2" "$3" "$4")
  }

  bp () {
    ctb pause:book $1 $2 $(datestamp "$3" "$4" "$5")
  }

  bz () {
    ctb time:book $1 $2 $(datestamp "$3" "$4" "$5")
  }

  z () {
    ctb time:list $(datestamp "$1" "$2" "$3")
  }
fi

[[ -d /Applications/Dash.app ]] && ds () {
  open "dash://b%3A$*"
}

fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    bg
    zle redisplay
  else
    zle push-input
  fi
}
zle -N fancy-ctrl-z

[ $commands[fd] ] && ff () {
  _ fd "$*" /
}

unalias j
j () {
  cd "$(fasd -d $@)"
}

konfigmerge () {
  export KUBECONFIG=~/.kube/config:$1
  cp ~/.kube/config ~/.kube/config.bak
  kubectl config view --flatten >| ~/.kube/merged
  cp ~/.kube/merged ~/.kube/config
  unset KUBECONFIG
  delta ~/.kube/config.bak ~/.kube/config
}

jira_timestamp () {
  [ $1 ] && echo "-S$(datestamp "$1" "$2" "$3")T00:00:00.000-0000"
}

datestamp () {
  [ $3 ] && echo "$3-$2-$1" && return
  [ $2 ] && echo "$(date +%Y-)$2-$1" && return
  [ $1 ] && echo "$(date +%Y-%m-)$1"
}

if [[ $commands[jira] ]]; then
  jira_stem () {
    jira login && jira worklog add --noedit $1 $2 $3
  }

  t () {
    jira_stem "$1" -T0"$2"h "$(jira_timestamp "$3" "$4" "$5")"
  }

  th () {
    jira_stem HHOTELS-"$1" -T0"$2"h "$(jira_timestamp "$3" "$4" "$5")"
  }

  thm () {
    jira_stem HHOTELS-2 -T0"$1"h "$(jira_timestamp "$2" "$3" "$4")"
  }

  thr () {
    jira_stem HHOTELS-13 -T0"$1"h "$(jira_timestamp "$2" "$3" "$4")"
  }

  ti () {
    jira_stem INT-52 -T0"$1"h "$(jira_timestamp "$2" "$3" "$4")"
  }

  tj () {
    jira_stem TS-39 -T0"$1"h "$(jira_timestamp "$2" "$3" "$4")"
  }

  tb () {
    jira_stem BELECTRIC-4 -T0"$1"h "$(jira_timestamp "$2" "$3" "$4")"
  }

  tm () {
    jira_stem INT-53 -T0"$1"h "$(jira_timestamp "$2" "$3" "$4")"
  }

  tmd () {
    jira_stem INT-54 -T0"$1"h "$(jira_timestamp "$2" "$3" "$4")"
  }

  trr () {
    jira_stem INT-2 -T0"$1"h "$(jira_timestamp "$2" "$3" "$4")"
  }
fi

u () {
  brew upgrade
  echo '\e[1mBrew upgrades finished 🍻'
  [ $commands[tldr] ] && echo '🍻 Updating tldr' && tldr --update 
  echo '🍻 Updating Prezto:\e[0m' && zprezto-update
}

# by Leah Neukirchen (http://leahneukirchen.org/dotfiles/.zshrc)
# wat - a better and recursive which/whence
# 13apr2017  +leah+
# 02jan2018  +leah+  print function code
wat() {
  ( # constrain unalias
  for cmd; do
    if (( $+aliases[$cmd] )); then
      printf '%s: aliased to %s\n' "$cmd" "${aliases[$cmd]}"
      local -a words=(${${(z)aliases[$cmd]}:#(*=*|rlwrap|noglob|command)})
      unalias "$cmd"
      if [[ ${words[1]} == "\""* ]]; then
        words[1]=${words[1]#"\""}
        unalias "${words[1]}" 2>/dev/null
      fi
      wat "${words[1]}"
    elif (( $+functions[$cmd] )); then
      whence -v "$cmd"
      whence -f "$cmd"
    elif (( $+commands[$cmd] )); then
      wat "${commands[$cmd]}"
      whatis "$cmd"
    elif [[ -h $cmd ]]; then
      file "$cmd"
      wat "$cmd:A"
    elif [[ -x $cmd ]]; then
      file "$cmd"
    else
      which "$cmd"
    fi
  done
  )
}
compdef wat=which

[ $commands[exa] ] && x () {
  [ $1 ] && target=$1 || target=.
  print "\e[1mcount: $(find $target -maxdepth 1 | wc -l )\e[0m" && exa -lah -s .name --git --icons $target
} && alias x.='x ..'

[ $commands[broot] ] && xx() {
    f=$(mktemp)
    (
	set +e
	broot -g --outcmd "$f" "$@"
	code=$?
	if [ "$code" != 0 ]; then
	    rm -f "$f"
	    exit "$code"
	fi
    )
    code=$?
    if [ "$code" != 0 ]; then
	return "$code"
    fi
    d=$(<"$f")
    rm -f "$f"
    eval "$d"
}

### GIT heart FZF
### https://junegunn.kr/2016/07/fzf-git/
########################################

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
  fzf --height 50% --min-height 20 --border --bind ctrl-/:toggle-preview "$@"
}

_gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1})' |
  cut -c4- | sed 's/.* -> //'
}

_gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

_gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {}'
}

_gl() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always' |
  grep -o "[a-f0-9]\{7,\}"
}

_gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1}' |
  cut -d$'\t' -f1
}

_gs() {
  is_in_git_repo || return
  git stash list | fzf-down --reverse -d: --preview 'git show --color=always {1}' |
  cut -d: -f1
}

join-lines() {
  local item
  while read item; do
    echo -n "${(q)item} "
  done
}

bind-git-helper() {
  local c
  for c in $@; do
    eval "fzf-g$c-widget() { local result=\$(_g$c | join-lines); zle reset-prompt; LBUFFER+=\$result }"
    eval "zle -N fzf-g$c-widget"
    eval "bindkey '^g^$c' fzf-g$c-widget"
  done
}
bind-git-helper f b t r l s
unset -f bind-git-helper

### Options
###########
unsetopt nomatch
